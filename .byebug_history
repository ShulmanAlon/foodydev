continue
next
continue
params[:version]
params[:id]
s3_uploader_params
continue
s3_uploader_params
next
continue
Json.parse(params["s3"])
require 'json'
require 'json
Json.parse(params["s3"])
params["s3"]
params
exit
image.type
image.format "png"
image.format "png
image.type
image.resize "100x100"
image = MiniMagick::Image.new(file.tempfile.path)
image.resize "100x100"
image = MiniMagick::Image.new(file)
image = MiniMagick::Image.new(file.tempfile.path)
MiniMagick::Image.new(file.tempfile.path)
image.resize "100x100"
MiniMagick::Image.new(file)
file.tempfile.path
file.tempfile
file
continue
e
continu
next
step
next
exit
finish
next
step
error
exit
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
continue
error
next
error
err
next
step
next
step
exit
next
exit
next
nots.size
next
exit
nots
next
nots.size
next
devices.uniq
next
devices
next
continue
next
step
continue
next
step
next
step
next
continue
next
step
next
continue
next
@publication.errors
next
continue
next
Publication.exists?(pub_id)
pub_id
exit
continue
pub.registered_user_for_publication
pub
continue
next
step
next
continue
group_member_params
continue
group_member_params
continue
group_member_params
continue
@group_member
@group_member.update(group_member_params)
continue
step
continue
nex
response.status
nextresponse.statu
continue
Resque.size("default")
next
continue
Resque.size("default")
Resque.size(0)
Resque.queues[0]
Resque.queues["default"]
Resque.queues
$redis.all
$redis
var all
next
enqueued_jobs
expect(enqueued_jobs.size).to eq(1)
continue
next
step
next
quit
next
response.status
response.body
response
next
step
continue
next
@_response.format
@_response
var all
format
next
step
next
op
next
step
continue
quit
finish
help
end
eend
exit
continue
next
continue
ENV['admin']
ENV['password']
params['password']
continue
cookies[:user]
exit
continue
next
var local
next
continue
GroupMember.all
GroupMember.find_by_user_id(11)
GroupMember.find_by_user_id(12)
params[:id]
@group_member_db_line
next
continue
next
step
User.last.id
continue
next
@user
self.user
var local
next
step
continue
next
up
next
var all
next
step
debug
var local
next
var local
var
help
continue
debug
next
debug
help
next
exit
var all
var
help
next
continue
help
next
nots.count
nots
next
